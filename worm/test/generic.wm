def Stack(T):
    with worm.scope(T=T): 
        # in this block T in Worm code maps to the Python T value
        @worm
        class NodeT:
            def new(self, value, tail):
                self.value: T = value
                self.tail: NodeT = tail

        @worm
        class StackT:
            head: NodeT = None
            def free(self):
                n = self.head
                while n is not None:
                    tail = n.tail
                    n.free()
                    n = tail

            def push(self, elem: T):
                self.head = NodeT.new(elem, self.head)

            def pop(self):
                if self.head is not None:
                    n = self.head
                    self.head = self.head.tail
                    return n.value
                else:
                    return None

            def empty(self):
                return self.head is None

            def reverse(self):
                other = StackT()

                while not self.empty():
                    other.push(self.pop())

                self.head = other.head
                other.head = None

    return StackT


I64Stack = Stack(int)


with worm.scope(Stack=I64Stack):
    @worm
    def stack_sort(st: I64Stack):
        if st.empty():
            return st

        pivot = st.pop()

        if st.empty():
            st.push(pivot)
            return st

        a = Stack()
        b = Stack()
        p = Stack()

        while not st.empty():
            e = st.pop()
            if e < pivot:
                a.push(e)
            elif e > pivot:
                b.push(e)
            else:
                p.push(e)

        stack_sort(a)
        stack_sort(b)

        while not b.empty():
            st.push(b.pop())

        while not p.empty():
            st.push(p.pop())

        while not a.empty():
            st.push(a.pop())

        st.reverse()


    @worm.entry
    def main(argv: Array[str]):
        l = Stack()
        for s in argv:
            l.push(s.to_int())
        stack_sort(l)
        l.reverse()
        while not l.empty():
            i = l.pop()
            print(i)

        return 0
